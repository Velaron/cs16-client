import java.time.LocalDateTime
import java.time.Month
import java.time.temporal.ChronoUnit

apply plugin: "com.android.application"

android {
    namespace = "su.xash.cs16client"
    ndkVersion = "28.2.13676358"
    compileSdk = 36

    defaultConfig {
        applicationId = "su.xash.cs16client"
        versionName = "1.35-" + getGitHash()
        versionCode = getBuildNum()
        minSdk = 21
        targetSdk = 36
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    externalNativeBuild {
        cmake {
            version = "3.22.1"
            path file("../../CMakeLists.txt")
        }
    }

    lint {
        abortOnError = false
    }

    packaging {
        jniLibs {
            keepDebugSymbols.add("**/*.so")
            useLegacyPackaging = true
        }
    }

    sourceSets {
        main {
            assets {
                srcDirs += ["${project.projectDir}/../../3rdparty/cs16client-extras", "${project.projectDir}/../../3rdparty/yapb/cfg"]
            }
        }
    }

    buildTypes {
        debug {
            debuggable = true
            applicationIdSuffix = ".test"

            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.txt"
        }

        release {
            minifyEnabled = true
            shrinkResources = true

            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.txt"
        }

        create("continuous") {
            initWith(getByName("release"))
            applicationIdSuffix = ".test"
        }
    }

    flavorDimensions += "version"

    productFlavors {
        create("googlePlay") {
            dimension = "version"
            applicationId = "in.celest.xash3d.cs16client"
            buildConfigField("Boolean", "IS_GOOGLE_PLAY_BUILD", "true")
        }

        create("git") {
            dimension = "version"
            buildConfigField("Boolean", "IS_GOOGLE_PLAY_BUILD", "false")
        }
    }

    buildFeatures {
        buildConfig = true
        aidl = true
    }
}

static def getBuildNum() {
    LocalDateTime now = LocalDateTime.now()
    LocalDateTime releaseDate = LocalDateTime.of(2015, Month.OCTOBER, 29, 0, 0, 0)
    int qBuildNum = releaseDate.until(now, ChronoUnit.DAYS)
    int minuteOfDay = now.getHour() * 60 + now.getMinute()
    return qBuildNum * 10000 + minuteOfDay
}

def getGitHash() {
    Process process = new ProcessBuilder("git", "rev-parse", "--short", "HEAD").directory(project.rootDir)
            .redirectErrorStream(true).start()
    InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream())
    BufferedReader bufferedReader = new BufferedReader(inputStreamReader)

    return bufferedReader.getText().trim()
}